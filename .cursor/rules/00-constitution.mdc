# 核心哲学 (The Constitution)

> 此规则文件具有最高优先级。无论是新增功能、优化还是修复缺陷，均必须遵守以下原则。

## 1. 数据驱动一切

- 任何业务逻辑、校验规则或 API 行为，必须优先通过查询配置表（如 `table_attribute`, `column_attribute`, `column_check_property`）来驱动。
- 编写 Java 代码前，先问自己：**"此功能能否仅通过修改数据库配置实现？"**

## 2. 配置优于编码

- 如果一个功能可以通过在数据库中新增或修改配置记录来完成，则严禁将其硬编码进 Java 代码。

## 3. 插件化一切

- 任何独立且体量较大的业务功能（例如文件服务、AI 服务）必须实现为可独立加载、卸载的插件。
- 插件应封装自身的 Controller、Service，并通过 `IPlugin` 接口与核心引擎交互。

## 4. 安全第一原则

- **用户信息获取**：所有用户相关信息必须通过认证切面（AuthenticationAspect）中获取的token解析出来的数据进行处理，严禁直接通过参数或其它任何方式获取。
- **白名单例外**：仅白名单中的无token服务可以通过数据库获取用户信息。
- **上下文使用**：所有需要用户信息的代码必须通过UserContext类获取，不得使用其他途径。
- **字段控制**：只能使用已在token_field_config表中配置为启用的用户字段。

## 5. 测试驱动开发

- **自动化测试**：所有功能优化、调整或新增都必须有相应的测试用例。
- **测试脚本**：为每个API端点创建curl测试文件，并编写相应的执行脚本。
- **测试环境**：确保测试可以在隔离环境中运行，不影响生产数据。
- **测试覆盖**：测试用例应覆盖正常流程、边界条件和异常情况。
- **回归测试**：任何代码修改都必须通过现有的测试套件，确保不破坏已有功能。

## 6. 文档同步更新

- **接口文档**：所有API变更必须同步更新相关接口文档。
- **开发文档**：重要的设计决策、架构变更必须记录在开发文档中。
- **使用说明**：面向最终用户的功能必须更新相应的使用说明文档。
- **注释完善**：关键代码必须有清晰的注释，特别是复杂算法、业务规则实现。
- **版本记录**：所有更新必须记录在版本历史文档中，包括功能变更、缺陷修复。

## 7. "三不三少"原则

### 三不
1. **不过度开发**：避免实现当前需求之外的功能。
2. **不过度复杂**：保持设计与实现的简单性。
3. **不破坏现有功能**：任何改动都不能影响已稳定运行的模块。

### 三少（按优先级排序）
1. **少调用（最高优先级）**：
   - 除了严格按照CommonService、BaseService、SystemMapper和XML文件的标准流程外，其它服务或方法能直接调用就直接调用
   - 避免增加不必要的中间过程和层级
   - 保持调用链简洁明了

2. **少代码（中等优先级）**：
   - 用最少的代码完成需求
   - 当单个文件代码量超过500-600行时，可考虑拆分为多个文件，确保代码的可读性和可维护性
   - 拆分时应基于功能模块进行合理划分

3. **少文件（基础优先级）**：
   - 通过业务逻辑和流程的简化、梳理
   - 确保用最少的服务、方法，通过最少的文件完成需求
   - 避免不必要的文件拆分，除非代码量过大影响可维护性

## 8. 完全自主运行模式

当用户明确提示需要"完全自主运行"时，应遵循以下原则：

1. **主动分析**：全面分析当前任务需求，主动识别所需的步骤和资源。
2. **连续执行**：无需用户确认每个步骤，连续执行完整的任务流程。
3. **自主决策**：在遵循核心哲学的前提下，自主做出技术决策和实现选择。
4. **完整交付**：确保交付的解决方案是完整的，包括所有必要的代码、配置和文档。
5. **结果报告**：任务完成后提供简明的执行总结，包括所做的主要更改和关键决策。
6. **测试验证**：
   - 主动执行测试脚本并检查结果文件
   - 分析测试日志，确认所有测试是否成功
   - 如发现错误，自主分析原因并修复问题
   - 查看相关数据库表记录，确保数据变更（更新、新增、删除）符合业务逻辑需求
   - 必要时进行二次测试，确保修复有效

此模式旨在提高开发效率，减少交互成本，但仍需确保所有实现严格遵循系统的核心哲学和规范。

---

遵循以上哲学，可确保系统保持高可配置性、可维护性与可扩展性。