---
description: 
globs: 
alwaysApply: true
---
# 核心哲学 (The Constitution)

> 此规则文件具有最高优先级。无论是新增功能、优化还是修复缺陷，均必须遵守以下原则。

## 1. 数据驱动一切

- 任何业务逻辑、校验规则或 API 行为，必须优先通过查询配置表（如 `table_attribute`, `column_attribute`, `column_check_property`）来驱动。
- 编写 Java 代码前，先问自己：**“此功能能否仅通过修改数据库配置实现？”**

## 2. 配置优于编码

- 如果一个功能可以通过在数据库中新增或修改配置记录来完成，则严禁将其硬编码进 Java 代码。

## 3. 插件化一切

- 任何独立且体量较大的业务功能（例如文件服务、AI 服务）必须实现为可独立加载、卸载的插件。
- 插件应封装自身的 Controller、Service，并通过 `IPlugin` 接口与核心引擎交互。

## 4. “三不三少”原则

### 三不
1. **不过度开发**：避免实现当前需求之外的功能。
2. **不过度复杂**：保持设计与实现的简单性。
3. **不破坏现有功能**：任何改动都不能影响已稳定运行的模块。

### 三少
1. **少文件**：尽量减少新增文件数量。
2. **少代码**：用最少的代码完成需求。
3. **少调用**：减少不必要的层级调用，保持调用链简洁。

---

遵循以上哲学，可确保系统保持高可配置性、可维护性与可扩展性。