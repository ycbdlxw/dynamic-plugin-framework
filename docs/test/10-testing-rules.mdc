# 测试文件和脚本创建规则

## 1. 基本原则

- **测试驱动开发**：所有新功能、优化或调整必须同时创建或更新对应的测试文件
- **自动化优先**：所有测试必须可以通过脚本自动执行，不依赖人工干预
- **格式规范**：所有测试文件必须遵循项目规定的格式规范
- **完整覆盖**：测试应覆盖正常流程、边界条件和异常情况

## 2. 测试文件创建规则

### 2.1 何时创建测试文件

在以下情况下必须创建或更新测试文件：

1. 创建新的Controller、Service或插件
2. 修改现有API的参数、返回值或业务逻辑
3. 修复Bug（同时添加针对该Bug的回归测试）
4. 优化性能（同时添加性能对比测试）

### 2.2 测试文件命名

测试文件必须遵循以下命名规则：

```
test_<模块名>_<功能点>.curl
```

例如：
- `test_common_api.curl` - 通用API测试
- `test_user_crud.curl` - 用户CRUD操作测试
- `test_plugin_command_executor.curl` - 命令执行器插件测试

### 2.3 测试文件位置

测试文件必须放置在以下目录：

```
src/main/resources/test/
```

执行脚本必须放置在以下目录：

```
src/main/resources/test/runs/
```

## 3. curl测试文件格式规则

### 3.1 文件头部

每个curl测试文件必须包含以下头部注释：

```
# <模块名> <功能点> 测试文件
# 使用方法: sh run_<模块名>_<功能点>_test.sh
# 创建日期: YYYY-MM-DD
# 创建人: <作者名>
```

### 3.2 行格式要求

curl测试文件中的每一行必须遵循以下规则：

1. 每行必须以`echo`、`#`或`curl`开头
2. 所有命令必须是单行格式，不允许使用反斜杠`\`换行
3. 每个测试用例前必须使用`#`注释说明测试内容
4. 每个测试用例必须使用`echo`命令输出测试步骤信息

### 3.3 curl命令格式

curl命令必须包含以下参数：

1. `-X METHOD` - 指定HTTP方法（GET, POST, PUT, DELETE等）
2. `-H "Content-Type: application/json"` - 指定内容类型
3. `-w "\n\nStatus: %{http_code}\nTime: %{time_total}s\n\n"` - 输出HTTP状态码和响应时间

对于需要认证的API，必须包含：

```
-H "Authorization: Bearer ${TOKEN}"
```

## 4. 执行脚本创建规则

### 4.1 何时创建执行脚本

每个curl测试文件必须有对应的执行脚本。执行脚本必须与curl测试文件同时创建或更新。

### 4.2 执行脚本命名

执行脚本必须遵循以下命名规则：

```
run_<模块名>_<功能点>_test.sh
```

例如：
- `run_common_api_test.sh`
- `run_user_crud_test.sh`
- `run_plugin_command_executor_test.sh`

### 4.3 执行脚本格式

执行脚本必须包含以下部分：

1. shebang行 `#!/bin/bash`
2. 脚本说明注释
3. 环境变量设置
4. 测试结果目录创建
5. 测试用例执行
6. 测试结果分析和保存

### 4.4 测试脚本执行方式

所有测试脚本必须通过测试服务器的execute方法执行，而不是直接执行curl命令。正确的执行方式是：

```bash
curl -s -X POST "${API_BASE}/api/test/execute?scriptPath=${CURL_FILE}&resultDir=${RESULT_DIR}&useCurrentDir=true"
```

**重要说明**：必须使用 `/api/test/execute` 端点执行测试脚本，而不是 `/api/test/run` 端点。`/api/test/run` 端点已被废弃，仅为向后兼容而保留。

## 5. 测试脚本生成工具使用

优先使用项目提供的测试脚本生成工具创建测试文件和执行脚本：

```bash
cd src/main/resources/test
./generate_test_script.sh <模块名> <功能点>
```

生成的文件需要根据实际测试需求进行编辑和完善。

## 6. 测试执行和验证

### 6.1 单个测试执行

在提交代码前，必须执行相关测试并验证通过：

```bash
cd src/main/resources/test/runs
sh run_<模块名>_<功能点>_test.sh
```

### 6.2 全部测试执行

在重要更新或发布前，必须执行所有测试：

```bash
cd src/main/resources/test/runs
sh run_all_tests.sh
```

## 7. 代码审查要求

在代码审查过程中，必须检查以下内容：

1. 是否创建或更新了对应的测试文件
2. 测试文件是否符合格式规范
3. 测试是否覆盖了所有关键场景
4. 测试是否能够成功执行并通过
5. 测试脚本是否通过`/api/test/execute`端点执行

## 8. 持续集成

所有测试必须集成到CI/CD流程中，确保在每次代码提交后自动执行测试。测试失败必须阻止代码合并。
